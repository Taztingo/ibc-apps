// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ice/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c739f638b294b57, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c739f638b294b57, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryListenersRequest is the request type for the Query/Listeners RPC method.
type QueryListenersRequest struct {
}

func (m *QueryListenersRequest) Reset()         { *m = QueryListenersRequest{} }
func (m *QueryListenersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListenersRequest) ProtoMessage()    {}
func (*QueryListenersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c739f638b294b57, []int{2}
}
func (m *QueryListenersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListenersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListenersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListenersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListenersRequest.Merge(m, src)
}
func (m *QueryListenersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListenersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListenersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListenersRequest proto.InternalMessageInfo

// QueryListenersResponse is the response type for the Query/Listeners RPC
// method.
type QueryListenersResponse struct {
	// listeners defines the event listeners that the host is publishing to.
	Listeners []*EventListener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (m *QueryListenersResponse) Reset()         { *m = QueryListenersResponse{} }
func (m *QueryListenersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListenersResponse) ProtoMessage()    {}
func (*QueryListenersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c739f638b294b57, []int{3}
}
func (m *QueryListenersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListenersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListenersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListenersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListenersResponse.Merge(m, src)
}
func (m *QueryListenersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListenersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListenersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListenersResponse proto.InternalMessageInfo

func (m *QueryListenersResponse) GetListeners() []*EventListener {
	if m != nil {
		return m.Listeners
	}
	return nil
}

// QueryRegisteredEventsRequest is the request type for the
// Query/RegisteredEvents RPC method.
type QueryRegisteredEventsRequest struct {
}

func (m *QueryRegisteredEventsRequest) Reset()         { *m = QueryRegisteredEventsRequest{} }
func (m *QueryRegisteredEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredEventsRequest) ProtoMessage()    {}
func (*QueryRegisteredEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c739f638b294b57, []int{4}
}
func (m *QueryRegisteredEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredEventsRequest.Merge(m, src)
}
func (m *QueryRegisteredEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredEventsRequest proto.InternalMessageInfo

// QueryRegisteredEventsResponse is the response type for the
// Query/RegisteredEvents RPC method.
type QueryRegisteredEventsResponse struct {
	// registered defines the event listeners that this chain has established.
	Registered []*EventListener `protobuf:"bytes,1,rep,name=registered,proto3" json:"registered,omitempty"`
}

func (m *QueryRegisteredEventsResponse) Reset()         { *m = QueryRegisteredEventsResponse{} }
func (m *QueryRegisteredEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredEventsResponse) ProtoMessage()    {}
func (*QueryRegisteredEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c739f638b294b57, []int{5}
}
func (m *QueryRegisteredEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredEventsResponse.Merge(m, src)
}
func (m *QueryRegisteredEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredEventsResponse proto.InternalMessageInfo

func (m *QueryRegisteredEventsResponse) GetRegistered() []*EventListener {
	if m != nil {
		return m.Registered
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ice.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ice.v1.QueryParamsResponse")
	proto.RegisterType((*QueryListenersRequest)(nil), "ice.v1.QueryListenersRequest")
	proto.RegisterType((*QueryListenersResponse)(nil), "ice.v1.QueryListenersResponse")
	proto.RegisterType((*QueryRegisteredEventsRequest)(nil), "ice.v1.QueryRegisteredEventsRequest")
	proto.RegisterType((*QueryRegisteredEventsResponse)(nil), "ice.v1.QueryRegisteredEventsResponse")
}

func init() { proto.RegisterFile("ice/v1/query.proto", fileDescriptor_8c739f638b294b57) }

var fileDescriptor_8c739f638b294b57 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x6b, 0xe2, 0x40,
	0x1c, 0xc5, 0x8d, 0xcb, 0x06, 0x1c, 0x41, 0xdc, 0xf1, 0xc7, 0xba, 0x59, 0x1d, 0x24, 0xec, 0x2e,
	0x1e, 0x76, 0x33, 0xa8, 0xec, 0xb1, 0x97, 0x42, 0x7b, 0x6a, 0xa1, 0xf5, 0x50, 0x68, 0x6f, 0x31,
	0x7e, 0x49, 0x03, 0x26, 0x13, 0x33, 0x13, 0x41, 0x7a, 0xeb, 0x5f, 0x50, 0xe8, 0xff, 0x54, 0x7a,
	0x14, 0x7a, 0xe9, 0xb1, 0x68, 0xff, 0x90, 0xe2, 0x64, 0x12, 0xab, 0xad, 0xed, 0xf5, 0xbd, 0xf7,
	0x7d, 0x9f, 0xe4, 0x25, 0x08, 0x7b, 0x0e, 0xd0, 0x69, 0x97, 0x4e, 0x62, 0x88, 0x66, 0x56, 0x18,
	0x31, 0xc1, 0xb0, 0xee, 0x39, 0x60, 0x4d, 0xbb, 0x46, 0xd3, 0x65, 0xcc, 0x1d, 0x03, 0xb5, 0x43,
	0x8f, 0xda, 0x41, 0xc0, 0x84, 0x2d, 0x3c, 0x16, 0xf0, 0x24, 0x65, 0x94, 0xd5, 0xe5, 0x2a, 0x2c,
	0x15, 0xb3, 0x8a, 0xf0, 0xe9, 0xaa, 0xe6, 0xc4, 0x8e, 0x6c, 0x9f, 0x0f, 0x60, 0x12, 0x03, 0x17,
	0xe6, 0x1e, 0xaa, 0x6c, 0xa8, 0x3c, 0x64, 0x01, 0x07, 0xfc, 0x07, 0xe9, 0xa1, 0x54, 0x1a, 0x5a,
	0x5b, 0xeb, 0x14, 0x7b, 0x25, 0x2b, 0xa1, 0x5a, 0x2a, 0xa7, 0x5c, 0xf3, 0x3b, 0xaa, 0xc9, 0xf3,
	0x23, 0x8f, 0x0b, 0x08, 0x20, 0xca, 0x7a, 0x8f, 0x51, 0x7d, 0xdb, 0x50, 0xd5, 0x7d, 0x54, 0x18,
	0xa7, 0x62, 0x43, 0x6b, 0x7f, 0xe9, 0x14, 0x7b, 0xb5, 0xb4, 0xfd, 0x60, 0x0a, 0x81, 0x48, 0x4f,
	0x06, 0xeb, 0x9c, 0x49, 0x50, 0x53, 0xd6, 0x0d, 0xc0, 0x5d, 0x69, 0x11, 0x8c, 0x64, 0x34, 0xc3,
	0x9d, 0xa1, 0xd6, 0x0e, 0x5f, 0x51, 0xff, 0x23, 0x14, 0x65, 0xde, 0xc7, 0xd8, 0x57, 0xc1, 0xde,
	0x5d, 0x1e, 0x7d, 0x95, 0xc5, 0xf8, 0x1c, 0xe9, 0xc9, 0xbb, 0x63, 0x23, 0x3d, 0x7b, 0x3b, 0xa7,
	0xf1, 0xf3, 0x5d, 0x2f, 0x79, 0x06, 0xb3, 0x7e, 0xfd, 0xf0, 0x7c, 0x9b, 0x2f, 0xe3, 0x12, 0x55,
	0x1f, 0x27, 0x19, 0x11, 0x03, 0x2a, 0x64, 0x33, 0xe1, 0xd6, 0x46, 0xc3, 0xf6, 0xae, 0x06, 0xd9,
	0x65, 0x2b, 0xc6, 0x0f, 0xc9, 0xa8, 0xe0, 0x6f, 0x29, 0x23, 0xdb, 0x10, 0x5f, 0xa1, 0xf2, 0xf6,
	0x3c, 0xf8, 0xd7, 0x46, 0xdd, 0x8e, 0x75, 0x8d, 0xdf, 0x9f, 0xa4, 0x14, 0xdb, 0x90, 0xec, 0x2a,
	0xc6, 0x29, 0x7b, 0x3d, 0xe4, 0xfe, 0xe1, 0xfd, 0x82, 0x68, 0xf3, 0x05, 0xd1, 0x9e, 0x16, 0x44,
	0xbb, 0x59, 0x92, 0xdc, 0x7c, 0x49, 0x72, 0x8f, 0x4b, 0x92, 0xbb, 0xf8, 0xeb, 0x7a, 0xe2, 0x32,
	0x1e, 0x5a, 0x0e, 0xf3, 0xa9, 0xc3, 0xb8, 0xcf, 0x38, 0xf5, 0x86, 0xce, 0x3f, 0x3b, 0x0c, 0x39,
	0xf5, 0xd9, 0x28, 0x1e, 0x03, 0x97, 0x7d, 0x62, 0x16, 0x02, 0x1f, 0xea, 0xf2, 0x67, 0xee, 0xbf,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x2a, 0xc5, 0x17, 0x1a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries all parameters of the ICE module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Listeners queries all event listeners.
	Listeners(ctx context.Context, in *QueryListenersRequest, opts ...grpc.CallOption) (*QueryListenersResponse, error)
	// RegisteredEvents queries all registered events.
	RegisteredEvents(ctx context.Context, in *QueryRegisteredEventsRequest, opts ...grpc.CallOption) (*QueryRegisteredEventsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ice.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Listeners(ctx context.Context, in *QueryListenersRequest, opts ...grpc.CallOption) (*QueryListenersResponse, error) {
	out := new(QueryListenersResponse)
	err := c.cc.Invoke(ctx, "/ice.v1.Query/Listeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredEvents(ctx context.Context, in *QueryRegisteredEventsRequest, opts ...grpc.CallOption) (*QueryRegisteredEventsResponse, error) {
	out := new(QueryRegisteredEventsResponse)
	err := c.cc.Invoke(ctx, "/ice.v1.Query/RegisteredEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries all parameters of the ICE module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Listeners queries all event listeners.
	Listeners(context.Context, *QueryListenersRequest) (*QueryListenersResponse, error)
	// RegisteredEvents queries all registered events.
	RegisteredEvents(context.Context, *QueryRegisteredEventsRequest) (*QueryRegisteredEventsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Listeners(ctx context.Context, req *QueryListenersRequest) (*QueryListenersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listeners not implemented")
}
func (*UnimplementedQueryServer) RegisteredEvents(ctx context.Context, req *QueryRegisteredEventsRequest) (*QueryRegisteredEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredEvents not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ice.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Listeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListenersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Listeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ice.v1.Query/Listeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Listeners(ctx, req.(*QueryListenersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ice.v1.Query/RegisteredEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredEvents(ctx, req.(*QueryRegisteredEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ice.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Listeners",
			Handler:    _Query_Listeners_Handler,
		},
		{
			MethodName: "RegisteredEvents",
			Handler:    _Query_RegisteredEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ice/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListenersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListenersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListenersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListenersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListenersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListenersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for iNdEx := len(m.Listeners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listeners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Registered) > 0 {
		for iNdEx := len(m.Registered) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Registered[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListenersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListenersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Listeners) > 0 {
		for _, e := range m.Listeners {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRegisteredEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRegisteredEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Registered) > 0 {
		for _, e := range m.Registered {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListenersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListenersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListenersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListenersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListenersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListenersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, &EventListener{})
			if err := m.Listeners[len(m.Listeners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registered = append(m.Registered, &EventListener{})
			if err := m.Registered[len(m.Registered)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
