// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ice/v1/packet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InterchainRegisterPacket is comprised of an event to listen for.
type InterchainRegisterPacket struct {
	// event defines the name of the event listen for.
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// memo is optional
	Memo string `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *InterchainRegisterPacket) Reset()         { *m = InterchainRegisterPacket{} }
func (m *InterchainRegisterPacket) String() string { return proto.CompactTextString(m) }
func (*InterchainRegisterPacket) ProtoMessage()    {}
func (*InterchainRegisterPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_094017127cbec1c8, []int{0}
}
func (m *InterchainRegisterPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainRegisterPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainRegisterPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainRegisterPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainRegisterPacket.Merge(m, src)
}
func (m *InterchainRegisterPacket) XXX_Size() int {
	return m.Size()
}
func (m *InterchainRegisterPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainRegisterPacket.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainRegisterPacket proto.InternalMessageInfo

func (m *InterchainRegisterPacket) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *InterchainRegisterPacket) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// InterchainUnregisterPacket is comprised of raw query.
type InterchainUnregisterPacket struct {
	// event defines the name of the event to stop listening for.
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// memo is optional
	Memo string `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *InterchainUnregisterPacket) Reset()         { *m = InterchainUnregisterPacket{} }
func (m *InterchainUnregisterPacket) String() string { return proto.CompactTextString(m) }
func (*InterchainUnregisterPacket) ProtoMessage()    {}
func (*InterchainUnregisterPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_094017127cbec1c8, []int{1}
}
func (m *InterchainUnregisterPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainUnregisterPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainUnregisterPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainUnregisterPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainUnregisterPacket.Merge(m, src)
}
func (m *InterchainUnregisterPacket) XXX_Size() int {
	return m.Size()
}
func (m *InterchainUnregisterPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainUnregisterPacket.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainUnregisterPacket proto.InternalMessageInfo

func (m *InterchainUnregisterPacket) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *InterchainUnregisterPacket) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// InterchainEventPacket is comprised of raw query.
type InterchainEventPacket struct {
	// event defines the name of the event that occurred.
	Event InterchainEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event"`
	// memo is optional
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *InterchainEventPacket) Reset()         { *m = InterchainEventPacket{} }
func (m *InterchainEventPacket) String() string { return proto.CompactTextString(m) }
func (*InterchainEventPacket) ProtoMessage()    {}
func (*InterchainEventPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_094017127cbec1c8, []int{2}
}
func (m *InterchainEventPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainEventPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainEventPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainEventPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainEventPacket.Merge(m, src)
}
func (m *InterchainEventPacket) XXX_Size() int {
	return m.Size()
}
func (m *InterchainEventPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainEventPacket.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainEventPacket proto.InternalMessageInfo

func (m *InterchainEventPacket) GetEvent() InterchainEvent {
	if m != nil {
		return m.Event
	}
	return InterchainEvent{}
}

func (m *InterchainEventPacket) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func init() {
	proto.RegisterType((*InterchainRegisterPacket)(nil), "ice.v1.InterchainRegisterPacket")
	proto.RegisterType((*InterchainUnregisterPacket)(nil), "ice.v1.InterchainUnregisterPacket")
	proto.RegisterType((*InterchainEventPacket)(nil), "ice.v1.InterchainEventPacket")
}

func init() { proto.RegisterFile("ice/v1/packet.proto", fileDescriptor_094017127cbec1c8) }

var fileDescriptor_094017127cbec1c8 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xb3, 0x5a, 0x0b, 0xae, 0x17, 0x89, 0x15, 0x43, 0x84, 0x55, 0x7a, 0xf2, 0xa0, 0xbb,
	0xd4, 0xbe, 0x41, 0xd1, 0x82, 0x37, 0x29, 0x78, 0xf1, 0x64, 0xb2, 0x1d, 0xd2, 0x45, 0xf7, 0x0f,
	0xbb, 0xdb, 0x80, 0x6f, 0xe1, 0x63, 0xf5, 0xd8, 0xa3, 0x27, 0x91, 0xe4, 0x45, 0x24, 0x9b, 0x40,
	0xa4, 0xc7, 0xde, 0x66, 0xbe, 0x19, 0x7e, 0x1f, 0xfc, 0xf0, 0x99, 0xe0, 0xc0, 0xca, 0x09, 0x33,
	0x19, 0x7f, 0x07, 0x4f, 0x8d, 0xd5, 0x5e, 0xc7, 0x43, 0xc1, 0x81, 0x96, 0x93, 0x74, 0x54, 0xe8,
	0x42, 0x87, 0x88, 0x35, 0x53, 0x7b, 0x4d, 0x2f, 0x3d, 0xa8, 0x25, 0x58, 0x29, 0x94, 0x67, 0x59,
	0xce, 0x05, 0xf3, 0x9f, 0x06, 0x5c, 0x77, 0x3c, 0xed, 0x78, 0x0d, 0x21, 0x24, 0xe3, 0x07, 0x9c,
	0x3c, 0x29, 0x0f, 0x96, 0xaf, 0x32, 0xa1, 0x16, 0x50, 0x08, 0xe7, 0xc1, 0x3e, 0x87, 0xba, 0x78,
	0x84, 0x8f, 0xa0, 0x04, 0xe5, 0x13, 0x74, 0x8d, 0x6e, 0x8e, 0x17, 0xed, 0x12, 0xc7, 0x78, 0x20,
	0x41, 0xea, 0xe4, 0x20, 0x84, 0x61, 0x1e, 0xcf, 0x71, 0xda, 0x53, 0x5e, 0x94, 0xdd, 0x97, 0xf3,
	0x86, 0xcf, 0x7b, 0xce, 0x63, 0xf3, 0xd6, 0x21, 0xa6, 0xff, 0x11, 0x27, 0xf7, 0x17, 0xb4, 0x75,
	0x40, 0x77, 0xbe, 0x67, 0x83, 0xcd, 0xcf, 0x55, 0xb4, 0xdb, 0x70, 0xd8, 0x37, 0xcc, 0xe6, 0x9b,
	0x8a, 0xa0, 0x6d, 0x45, 0xd0, 0x6f, 0x45, 0xd0, 0x57, 0x4d, 0xa2, 0x6d, 0x4d, 0xa2, 0xef, 0x9a,
	0x44, 0xaf, 0xb7, 0x85, 0xf0, 0xab, 0x75, 0x4e, 0xb9, 0x96, 0x8c, 0x6b, 0x27, 0xb5, 0x63, 0x22,
	0xe7, 0x77, 0x99, 0x31, 0x8e, 0x49, 0xbd, 0x5c, 0x7f, 0x80, 0x6b, 0xbc, 0xb5, 0x3e, 0xf3, 0x61,
	0xd0, 0x37, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x03, 0x9e, 0xb8, 0xa2, 0x01, 0x00, 0x00,
}

func (m *InterchainRegisterPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainRegisterPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainRegisterPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterchainUnregisterPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainUnregisterPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainUnregisterPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterchainEventPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainEventPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainEventPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterchainRegisterPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *InterchainUnregisterPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *InterchainEventPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Event.Size()
	n += 1 + l + sovPacket(uint64(l))
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterchainRegisterPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainRegisterPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainRegisterPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainUnregisterPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainUnregisterPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainUnregisterPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainEventPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainEventPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainEventPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
